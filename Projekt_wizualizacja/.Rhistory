title = "Liczebność grup wiekowych",
x = "Liczebność") +
theme(
axis.title.x = element_text(size = 12),
axis.text = element_text(size = 8),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(size = 6.5, color = "black"),
axis.ticks.x = element_line(color = "grey"),
axis.line.x = element_line(color = "grey"),
axis.ticks.y = element_blank(),
axis.line.y = element_blank())
#Wyświetlanie
grid.arrange(p3, p4, ncol = 2)
#Bibliotek
library(rio)
library(tidyverse)
library(ggsoccer)
library(sf)
library(leaflet)
library(RColorBrewer)
library(htmlwidgets)
library(data.table)
library(knitr)
library(ggtext)
library(scales)
library(worldfootballR)
library(hrbrthemes)
library(gridExtra)
library(plotly)
library(factoextra)
library(DT)
#Importowanie danych
data <- import("football_data.csv")
#Ramka pomocnicza
data_shots <- data.frame(
rodzaje = c("Gole", "Oczekiwane gole"),
wartosci = c(sum(data$Gls_Standard, na.rm = TRUE), sum(data$xG, na.rm = TRUE)))
#Tworzenie wykresu
ggplot(data_shots, aes(x = rodzaje, y = wartosci)) +
geom_bar(stat = "identity", width = 0.5, color = "dimgray", fill = "#404080") +
geom_text(aes(label = wartosci), vjust = -0.5, color = "black", size = 5) +
labs(
title = "Porównanie łącznej liczby goli i oczekiwanych goli") +
scale_y_continuous(limits = c(0, 50000)) +
theme_minimal() +
theme(
legend.position = "none",
axis.text.x = element_text(size = 16, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(size = 14, colour = "black"))
#Obliczanie średniej
mean(data$G_minus_xG_Expected, na.rm = TRUE)
#Importowanie danych
data_winners <- import("football_data_winners.csv")
#Tworzenie wykresu
ggplot(data=data_winners, aes(x=G_minus_xG_Expected, group=win, fill=as.factor(win))) +
geom_density(adjust=1.5, position="fill") +
scale_fill_manual(values=c("lightgrey", "#404080"),
labels=c("Miejsca poniżej 5", "Miejsca powyżej lub równe 5")) +
theme_ipsum() +
labs(fill="Win Status", x="Skuteczność", y="Gęstość",
title="Rozkład dodatniej skuteczności z podziałem na zajętą pozycje w lidze") +
theme(legend.title = element_blank(),
legend.text = element_text(size = 8, color = "black"),
plot.title = element_text(size = 10, hjust = 0.25),
panel.grid = element_blank(),
legend.position = "right") +
xlim(0, 10)
#Ramka pomocnicza
data_pitch <- data %>%
group_by(Pos) %>%
summarise(
mean_position = mean(G_minus_xG_Expected, na.rm = TRUE)) %>%
mutate(
x = case_when(
Pos == "FW" ~ 85,
Pos == "MF" ~ 57,
Pos == "DF" ~ 25),
y = 40,
label = case_when(
Pos == "FW" ~ "Napastnicy",
Pos == "MF" ~ "Pomocnicy",
Pos == "DF" ~ "Obrońcy",
Pos == "GK" ~ "Bramkarze"))
#Tworzenie wykresu
ggplot() +
annotate_pitch(colour = "grey80", dimensions = pitch_statsbomb) +
theme_pitch() +
coord_flip(xlim = c(0, 100), ylim = c(0, 100)) +
geom_point(data = data_pitch, aes(x = x, y = y, color = mean_position), size = 24) +
geom_text(data = data_pitch, aes(x = x, y = y, label = round(mean_position, 2)),
color = "black", size = 5, vjust = 0.2, inherit.aes = FALSE) +
geom_text(data = data_pitch, aes(x = x, y = y - 17, label = label),
color = "dimgray", size = 5, inherit.aes = FALSE) +
scale_color_gradient2(low = "red", high = "green", midpoint = 0) +
labs(
title = "Skuteczność względem pozycji na boisku",
color = "Skuteczność") +
theme(
panel.grid = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = c(0.9, 0.6),
legend.text = element_text(size = 10),
legend.title = element_text(size = 14),
plot.title = element_text(size = 14, color = "black"))
#Ramka pomocnicza
data_sho_pos <- data %>%
group_by(Pos) %>%
summarise(
total_shots = sum(Sh_Standard, na.rm = TRUE)) %>%
mutate(
Pos = case_when(
Pos == "DF" ~ "Obrońcy",
Pos == "MF" ~ "Pomocnicy",
Pos == "FW" ~ "Napastnicy"))
#Tworzenie wykresu
p1 <- ggplot(data_sho_pos, aes(x = reorder(Pos, total_shots), y = total_shots)) +
geom_bar(stat = "identity", width = 0.5, color = "dimgray", fill = "dimgray") +
geom_text(aes(label = total_shots), vjust = -0.5, color = "black", size = 5) +
labs(
title = "Liczba strzałów oddanych przez zawodników na poszczególnych pozycjach") +
scale_y_continuous(limits = c(0, max(data_sho_pos$total_shots) * 1.1)) +
theme_minimal() +
theme(
legend.position = "none",
axis.text.x = element_text(size = 12, color = "black"),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10, color = "black"),
axis.title.y = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(size = 10, colour = "black"))
#Tworzenie ramki pomocniczej
shots_by_pos <- data %>%
group_by(Pos) %>%
summarise(
total_shots = sum(Sh_Standard, na.rm = TRUE))
#Obliczenie całkowitej liczby strzałów
total_shots_sum <- sum(shots_by_pos$total_shots, na.rm = TRUE)
#Obliczenie procentowego udziału w strzałach
shots_by_category <- shots_by_pos %>%
mutate(
percentage = (total_shots / total_shots_sum) * 100,
Pos = factor(Pos, levels = c("FW", "MF", "DF"))
)
#Tworzenie wykresu procentowego
p2 <- ggplot(shots_by_category, aes(x = "", y = percentage, fill = Pos)) +
geom_bar(stat = "identity", width = 0.3) +
coord_flip() +
labs(
title = "Procentowy udział strzałów w zależności od pozycji",
subtitle = "<span style='color:dimgray;'>Obrońcy</span> |
<span style='color:lightgray;'>Pomocnicy</span> |
<span style='color:navy;'>Napastnicy</span>",
x = "",
y = "Procentowy udział strzałów"
) +
scale_y_continuous(
breaks = seq(0, 100, by = 10),
labels = function(x) paste0(x, "%")) +
scale_fill_manual(
values = c("DF" = "dimgray", "MD" = "lightgray", "FW" = "#404080")) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 8,margin = margin(r = -20)),
axis.ticks.x = element_line(color = "gray", size = 0.5),
axis.line.x = element_line(color = "gray", size = 0.5),
plot.title.position = "plot",
plot.subtitle = element_markdown(),
plot.margin = margin(t = 220, b = 10, l = 20, r = 20),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10, color = "gray", margin = margin(t = -300)),
legend.position = "none",
plot.title = element_text(size = 10, colour = "black"))
#Wyświetlanie 2 wykresów
grid.arrange(p1, p2, ncol = 2)
#Tworzenie pomocniczej ramki
data_pos_dist <- data %>%
filter(Pos == c("DF", "FW"))
#Wyliczanie wartosci
data_pos_dist %>%
group_by(Pos) %>%
summarise(
"mean_dist (yards)" = mean(Dist_Standard, na.rm = TRUE))%>%
as.data.frame()
#Tworzenie ramki pomocniczej
data_pom <- data %>%
group_by(Nation) %>%
summarise(
effectiveness = mean(G_minus_xG_Expected, na.rm = TRUE),
count_players = n()) %>%
arrange(effectiveness)%>%
as.data.frame()
#Wyświetlanie
head(data_pom)
#Tworzenie ramki pomocniczej
data_BEN <- data %>%
filter(Nation == "BEN") %>%
mutate(effectiveness = G_minus_xG_Expected) %>%
arrange(effectiveness) %>%
as.data.frame()
#Wyświetlanie
data_BEN$effectiveness
#Tworzenie ramki pomocniczej
data_pom5 <- data %>%
group_by(Nation) %>%
summarise(
effectiveness = mean(G_minus_xG_Expected, na.rm = TRUE),
count_players = n()) %>%
filter(count_players > 15) %>%
arrange(effectiveness)%>%
as.data.frame()
#Wyświetlanie
head(data_pom5)
#Tworzenie ramki pomocniczej
data_mean_max <- data %>%
group_by(Nation) %>%
summarise(
effectiveness = mean(G_minus_xG_Expected, na.rm = TRUE),
count_players = n()) %>%
arrange(desc(effectiveness))%>%
filter(count_players > 15) %>%
as.data.frame()
#Wyświetlanie
head(data_mean_max)
#Tworzenie ramki na podstawie której będzie stworzona interaktywna mapa
world_sf <- read_sf(paste0(
getwd(), "/DATA/",
"TM_WORLD_BORDERS_SIMPL-0.3.shp"))
#Tworzenie ramki pomocniczej
data_map <- copy(data)
#Sprawdzamy które kraje nie pasują do kodowania ISO3
#setdiff(data_map$Nation, world_sf$ISO3)
#Zmiana kodów niektórych krajów aby były one zgodne z kodowaniem ISO 3
data_map$Nation[data_map$Nation == "ALG"] <- "DZA"
data_map$Nation[data_map$Nation == "ANG"] <- "AGO"
data_map$Nation[data_map$Nation == "BER"] <- "BMU"
data_map$Nation[data_map$Nation == "BUL"] <- "BGR"
data_map$Nation[data_map$Nation == "CGO"] <- "COG"
data_map$Nation[data_map$Nation == "CHA"] <- "TCD"
data_map$Nation[data_map$Nation == "CHI"] <- "CHL"
data_map$Nation[data_map$Nation == "CRC"] <- "CRI"
data_map$Nation[data_map$Nation == "CRO"] <- "HRV"
data_map$Nation[data_map$Nation == "CTA"] <- "CIV"
data_map$Nation[data_map$Nation == "GER"] <- "DEU"
data_map$Nation[data_map$Nation == "DEN"] <- "DNK"
data_map$Nation[data_map$Nation == "ENG"] <- "GBR"
data_map$Nation[data_map$Nation == "EQG"] <- "GNQ"
data_map$Nation[data_map$Nation == "GAM"] <- "GMB"
data_map$Nation[data_map$Nation == "GRE"] <- "GRC"
data_map$Nation[data_map$Nation == "GRN"] <- "GRD"
data_map$Nation[data_map$Nation == "GUA"] <- "GTM"
data_map$Nation[data_map$Nation == "GUI"] <- "GIN"
data_map$Nation[data_map$Nation == "HAI"] <- "HTI"
data_map$Nation[data_map$Nation == "HON"] <- "HND"
data_map$Nation[data_map$Nation == "KSA"] <- "SAU"
data_map$Nation[data_map$Nation == "KOS"] <- "XKX"
data_map$Nation[data_map$Nation == "KVX"] <- "KOS"
data_map$Nation[data_map$Nation == "MAD"] <- "MAR"
data_map$Nation[data_map$Nation == "MTN"] <- "MNE"
data_map$Nation[data_map$Nation == "NED"] <- "NLD"
data_map$Nation[data_map$Nation == "NIG"] <- "NER"
data_map$Nation[data_map$Nation == "PAR"] <- "PRY"
data_map$Nation[data_map$Nation == "PHI"] <- "PHL"
data_map$Nation[data_map$Nation == "PLE"] <- "PSE"
data_map$Nation[data_map$Nation == "POR"] <- "PRT"
data_map$Nation[data_map$Nation == "RSA"] <- "ZAF"
data_map$Nation[data_map$Nation == "SCO"] <- "GBR"
data_map$Nation[data_map$Nation == "SKN"] <- "KNA"
data_map$Nation[data_map$Nation == "SMN"] <- "SMR"
data_map$Nation[data_map$Nation == "SUI"] <- "CHE"
data_map$Nation[data_map$Nation == "TAN"] <- "TZA"
data_map$Nation[data_map$Nation == "TOG"] <- "TGO"
data_map$Nation[data_map$Nation == "TRI"] <- "TTO"
data_map$Nation[data_map$Nation == "URU"] <- "URY"
data_map$Nation[data_map$Nation == "WAL"] <- "GBR"
data_map$Nation[data_map$Nation == "ZAM"] <- "ZMB"
data_map$Nation[data_map$Nation == "ZIM"] <- "ZWE"
#Grupowanie i obliczanie średniej skuteczności dla każdego kraju
data_map <- data_map %>%
group_by(Nation) %>%
summarise(
mean_G_minus_xG = mean(G_minus_xG_Expected, na.rm = TRUE),
count_observations = n())
#Tworzenie odpowiedniej ramki do stworzenia mapy
world_sf <- world_sf %>%
left_join(data_map, by = c("ISO3" = "Nation"))
#Kolory na mapie
mybins <- seq(-1.8, 1.7, by = 0.01)
mypalette <- colorBin(
palette = "YlOrBr", domain = world_sf$mean_G_minus_xG,
na.color = "transparent", bins = mybins)
#Przygotowanie tekstu do wyświetlania
mytext <- paste(
"Kraj: ", world_sf$NAME, "<br/>",
"Skuteczność: ", round(world_sf$mean_G_minus_xG, 2), "<br/>",
"Liczba piłkarzy: ", world_sf$count_observations,
sep = "") %>%
lapply(htmltools::HTML)
#Tworzenie mapy
map <- leaflet(world_sf) %>%
addTiles() %>%
setView(lat = 10, lng = 0, zoom = 2) %>%
addPolygons(
fillColor = ~mypalette(mean_G_minus_xG),
stroke = TRUE,
fillOpacity = 0.9,
color = "white",
weight = 0.3,
label = mytext,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"))
#Zapis mapy
saveWidget(map, file=paste0( getwd(), "/HtmlWidget/choroplethLeaflet1.html"))
#Wyświetlenie
map
#Tworzenie wykresu
ggplot(data, aes(x = Comp, y = G_minus_xG_Expected, fill = Comp)) +
geom_violin(trim = FALSE, alpha = 0.7) +
geom_boxplot(width = 0.4, outlier.shape = NA) +
xlab(NULL) +
ylab("Skuteczność") +
ggtitle("Skuteczność piłkarzy ze względu na ligi") +
theme(
plot.title = element_text(size = 16, color = "black", hjust = -0.1),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.text.x = element_text(size = 12, color = "black"),
axis.text.y = element_text(size = 6)) +
scale_y_continuous(breaks = seq(-10, 13, by = 1))+
geom_hline(yintercept = -0.1, linetype = "dashed", color = "navy")
#Ustalenie poziomów grup wiekowych
data$Age_Group <- factor(
data$Age_Group,
levels = c(
"Junior (18 i poniżej)",
"Bardzo młody (21 i poniżej)",
"Młody (26 i poniżej)",
"Średni (30 i poniżej)",
"Starszy (powyżej 30)"))
#Tworzenie ramki pomocniczej
data_age <- data %>%
group_by(Age_Group) %>%
summarise(Avg_G_minus_xG = mean(G_minus_xG_Expected, na.rm = TRUE),
Count = n())
#Tworzenie pierwszego wykresu
p3 <- ggplot(data_age, aes(x = Avg_G_minus_xG, y = Age_Group)) +
geom_bar(stat = "identity", fill = "mediumseagreen") +
theme_minimal() +
labs(
title = "Skuteczność według grup wiekowych",
x = "Skuteczność") +
theme(
axis.title.x = element_text(size = 12),
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 10, face = "bold", color = "black"),
axis.title.y = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(size = 6.5, color = "black"),
axis.ticks.x = element_line(color = "grey"),
axis.line.x = element_line(color = "grey"),
axis.ticks.y = element_blank(),
axis.line.y = element_blank()) +
coord_cartesian(xlim = c(-0.075, 0.025))
#Tworzenie drugiego wykresu
p4 <- ggplot(data_age, aes(x = Count, y = Age_Group)) +
geom_bar(stat = "identity", fill = "#404080") +
theme_minimal() +
labs(
title = "Liczebność grup wiekowych",
x = "Liczebność") +
theme(
axis.title.x = element_text(size = 12),
axis.text = element_text(size = 8),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(size = 6.5, color = "black"),
axis.ticks.x = element_line(color = "grey"),
axis.line.x = element_line(color = "grey"),
axis.ticks.y = element_blank(),
axis.line.y = element_blank())
#Wyświetlanie
grid.arrange(p3, p4, ncol = 2)
#Tworzenie pomocniczej ramki danych
data_pom6 <- data %>%
filter(Age > 18 & Age <= 21)
#Flitrowanie piłkarzyna po kolumnie "Player" którzy zostali wprowadzeni między 18 a 21 rokiem życia
data_pom6 <- data %>%
filter(Player %in% data_pom6$Player)
#Odrzucanie obserwacji miedzy 18, a 21 rokiem życia, aby zobaczyc czy po tym okresie zaczeli cechować się wyższą skutecznością
data_pom6 <- data_pom6 %>%
filter(Age > 21)
#Tworzenie ramki z piłkarzami powyżej 21 roku życia którzy, zadebiutowali po tym wieku
data_pom7 <- data %>%
filter(Age > 21 & !(Player %in% data_pom6$Player))
#Łączenie obserwacji ze stworzeniem dodatkowej kolumny
data_early_start <- bind_rows(
data_pom6 %>% mutate(early_start = TRUE),
data_pom7 %>% mutate(early_start = FALSE))
#Tworzenie wykresu
ggplot(data_early_start, aes(x = G_minus_xG_Expected, fill = as.factor(early_start))) +
geom_density(alpha = 0.6) +
labs(
title = "Rozkład skuteczności zawodników powyżej 21 roku życia",
x = "Skuteczność",
y = "Gęstość",
fill = ""
) +
scale_fill_manual(values = c("TRUE" = "#404080", "FALSE" = "mediumseagreen"),
labels = c("TRUE" = "Debiut przed 21 rokiem życia", "FALSE" = "Debiut po 21 roku życia")) +
theme_minimal() +
theme(
axis.title.x = element_text(size = 12),
axis.text = element_text(size = 12),
axis.text.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 12),
plot.title = element_text(size = 16, hjust = 0, color = "black"),
panel.grid = element_blank())
#Tworzenie wykresu 3d
plot_ly(
data = data,
x = ~Dist_Standard,
y = ~Sh_Standard,
z = ~G_minus_xG_Expected,
color = ~Age_Group,
colors = "Blues",
type = "scatter3d",
mode = "markers",
text = ~paste(
"<b>Player:</b>", Player, "<br>",
"<b>Średni dystans od bramki przeciwnika:</b>", Dist_Standard, "<br>",
"<b>Ilość strzałów:</b>", Sh_Standard, "<br>",
"<b>Skuteczność:</b>", G_minus_xG_Expected, "<br>",
"<b>Wiek:</b>", Age, "<br>",
"<b>Sezon:</b>", Season_End_Year),
hoverinfo = "text") %>%
layout(
scene = list(
xaxis = list(title = "Średni dystans od bramki przeciwnika"),
yaxis = list(title = "Ilość strzałów"),
zaxis = list(title = "Skuteczność")),
title = "")
#Wybór cech
data_cluster <- data %>%
select(Age_Group, G_minus_xG_Expected)
# Przekształcenie pozycji na liczby
data_cluster$Age_Group <- as.numeric(factor(data_cluster$Age_Group))
# Normalizacja danych
data_cluster_scaled <- scale(data_cluster)
#Tworzenie wykresu "łokcia"
fviz_nbclust(data_cluster_scaled, kmeans, method = "wss")
#Tworzenie wykresu "silhouette"
fviz_nbclust(data_cluster, kmeans, method = "silhouette", k.max = 6)
#Ustalenie ziarna
set.seed(12)
#Tworzenie klastrów
optimal_cluster <- kmeans(data_cluster, centers = 3, iter.max = 25)
#Wizualizacja
fviz_cluster(optimal_cluster, data = data_cluster, labelzise = 0)
#Dodanie klastrów do ramki data_cluster
data_cluster$Cluster <-optimal_cluster$cluster
#Dodanie klastrów do ramki data
data$Cluster <- optimal_cluster$cluster
#Tworzenie pomocniczej ramki
data_pom7 <- data %>%
select(Player, Season_End_Year, Cluster)
#Wyświetlanie
datatable(data_pom7)
#Kolory na mapie
mybins <- seq(-1.8, 1.7, by = 0.01)
mypalette <- colorBin(
palette = "YlOrBr", domain = world_sf$mean_G_minus_xG,
na.color = "transparent", bins = mybins)
#Przygotowanie tekstu do wyświetlania
mytext <- paste(
"Kraj: ", world_sf$NAME, "<br/>",
"Skuteczność: ", round(world_sf$mean_G_minus_xG, 2), "<br/>",
"Liczba piłkarzy: ", world_sf$count_observations,
sep = "") %>%
lapply(htmltools::HTML)
#Tworzenie mapy
map <- leaflet(world_sf) %>%
addTiles() %>%
setView(lat = 10, lng = 0, zoom = 2) %>%
addPolygons(
fillColor = ~mypalette(mean_G_minus_xG),
stroke = TRUE,
fillOpacity = 0.9,
color = "white",
weight = 0.3,
label = mytext,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"))
#Zapis mapy
saveWidget(map, file=paste0( getwd(), "/HtmlWidget/choroplethLeaflet1.html"))
#Wyświetlenie
map
